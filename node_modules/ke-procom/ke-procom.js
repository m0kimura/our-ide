'use strict';
const Hp=require('http');
const Ur=require('url');
const Ml = require('nodemailer');
const keChatwork=require('ke-chatwork');
module.exports=class keDevcon extends keChatwork {
  constructor(tokenChat, tokenGit) {
    super(tokenChat);
    this.GitlabParas={};
    this.GitlabParas.private_token=tokenGit;
  }
  //
  server() {
    let me=this, txt, data;
    me.SS={};
    Hp.createServer(function(req, res){
      me.SS.URI=Ur.parse(req.url);
      me.SS.PATH=me.SS.URI.pathname.split('/');
      me.SS.method=req.method;
      me.infoLog(req.method+','+req.url);
      txt='OK';
      switch(req.method) {
      case 'POST':
        data='';
        req.on('data', function(chunk) {
          data += chunk;
        });
        req.on('end', function() {
          let s=data.indexOf('{');
          let x=data.substr(s);
          switch(me.SS.PATH[1]) {
          case 'redmine': me.processRedmine(x); break;
          default: me.processGitlab(x);
          }
        });
        break;
      case 'GET':
        me.processGet();
        break;
      default:
        me.infoLog(req.method + ',' + req.url);
      }
  //
      res.writeHead(200, {'Content-Type': 'text/plain', 'charset': 'utf-8'});
      res.end(txt);
    }).listen(8088);
    me.infoLog('開発管理サーバーを開始しました。');
  }
  //
  processGitlab(msg) {
    let o, x, y, c, p, objs='', branch;
    console.log('msg:', msg);
    try{
      o=JSON.parse(msg);
    }catch(e){
      o={}; o.object_kind=msg;
    }
    switch (o.object_kind) {
    case 'push':
      console.log(o.user_name, o.project.name, o.ref);
      for(x in o.commits) {
        console.log(o.commits[x].id, o.commits[x].message);
        c=''; for(y in o.commits[x].added) {
          objs+=c+o.commits[x].added[y]; c=',';
        }
        for(y in o.commits[x].modified) {
          objs+=c+o.commits[x].modified[y]; c=',';
        }
        for(y in o.commits[x].removed) {
          objs+=c+o.commits[x].removed[y]; c=',';
        }
        p=o.ref.indexOf('#');
        branch=o.ref.substr(p+1);
        console.log('branch='+branch+' obj='+objs);
      }
      break;
    default:
      this.infoLog('ignore object=' + o.object_kind);
    }
  }
  //
  processRedmine(msg) {
    let o, me=this;
    try{
      o=JSON.parse(msg).payload;
    }catch(e){
      o={}; o.action='error JSON';
    }
    let j=o.journal;
    switch (o.action) {
    case 'update':
      if(o.status.name=='終了(F)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value != '5') {
            me.pushMessage('作業が終了しました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      if(o.status.name=='指示(O)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value != '2') {
            me.pushMessage('作業がオーダーされました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      if(o.status.name=='実施(E)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value == '4') {
            me.pushMessage('保留が解除されました。', 'project-ha');
            console.log(o.issue);
            break;
          }
          if(j.details[i].old_value != '3') {
            me.pushMessage('作業を開始しました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      if(o.status.name=='精査(P)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value != '6') {
            me.pushMessage('精査が終了しました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      if(o.status.name=='中止(Q)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value != '7') {
            me.pushMessage('工程は中止されました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      if(o.status.name=='保留(H)') {for(let i in j.details) {
        if( j.details[i].prop_key == 'status_id') {
          if(j.details[i].old_value != '4') {
            me.pushMessage('作業は保留されました。', 'project-ha');
            console.log(o.issue);
            break;
          }
        }
      }}
      break;
    default:
      this.infoLog('ignore object=' + o.object_kind);
    }
  }
//
  processGet() {
    let me=this;
    switch(me.SS.PATH[1]) {
    case 'report':
      switch(me.SS.PATH[2]) {
      case 'finish':
        me.redmine('finish', {'id': me.SS.PATH[3]-0});
        break;
      case 'pass':
        me.redmine('pass', {'id': me.SS.PATH[3]-0});
        break;
      default:
      }
      break;
    default:
    }
  }
//
  gitCommand(op) {
    switch(op.command){
    case 'status':
      this.commands([
        'git status'
      ]);
      break;
    case 'clone':
      this.commands([
        'git clone ' + op.repository
      ]);
      break;
    case 'order':
      this.commands([
        'git checkout master',
        'git fetch origin master',
        'git checkout -b ' + op.branch
      ]);
      break;
    case 'merge':
      this.commands([
        'git checkout master',
        'git fetch origin master',
        'git merge ' + op.branch,
        'git push',
        'git branch --delete origin ' + op.branch,
        'git push --delete origin ' + op.branch
      ]);
      break;
    default:
    }
  }
//
  commands(cmds) {
    let i; for(i in cmds){
      if(this.shell(cmds[i])){
        this.infoLog(this.stdout);
      }else{
        this.errorLog('shell command error =' + cmds[i], this.error);
        break;
      }
    }
  }
//
//setting = {host: auth: {user: pass: port: }
//op= {from: , to: , subject: , html:}
  sendMail(op, setting) {
    const me=this;
    let wid=me.ready();
    const smtp=Ml.createTransport('SMTP', setting);
    smtp.sendMail(op, function(err, res){
      if(err){me.error=err; me.post(wid, false);}
      else{me.post(wid, res.message);}
    });
    return me.wait();
  }
//
  redmine(method, op) {
    let me=this, body, path;
    switch(method){
    case 'ticket':
      body=me.redIssue(op);
      path='/issues.json';
      break;
    case 'finish':
      body=me.redIssueUp(method);
      path='/issues/'+op.id+'.json';
      break;
    default:
    }
    me.postRequest(
      {hostname: me.hostname, path: path, port: 8088},
       body,
       false
    );
  }
//
  redIssue(op) {
    return {
      'issue': {
        'project_id': op.project,
        'tracker_id': op.tracker,
        'status_id': 1,
        'subject': op.subject,
        'description': op.descrition,
        'assigned_to_id': op.assign,
        'fixed_version_id':2,
        'parent_issue_id': op.parent,
        'custom_field_values': op.custom
      }
    };
  }
//
  redIssueUp(cmd) {
    switch(cmd) {
    case 'finish':
      return {'issue': {'status': {'id': 5}}};
    case 'pass':
      return {'issue': {'status': {'id': 6}}};
    default:
    }
  }
//
  redUserAdd(dt) {
    let out=[];
    out[0]=[
      'login', 'password', 'lastname', 'firstname', 'mail', 'admin'
    ];
    for(let i in dt) {
      out[i+1]=[
        dt[i].userid, dt[i].password, dt[i].lastname,
        dt[i].firstname, dt[i].mail, false
      ];
    }
    return out;
  }
//
  gitUserAdd(dt) {
    let out=[];
    for(let i in dt){
      out[i]={};
      out[i].email=dt[i].mail;
      out[i].password=dt[i].password;
      out[i].username=dt[i].mail;
      out[i].name=dt[i].lastname + ' ' + dt[i].firstname;
      out[i].username=dt[i].mail;
      out[i].confirm=false;
    }
  }
};
